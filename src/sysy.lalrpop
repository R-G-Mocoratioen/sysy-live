use crate::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

// 同上, 不解释
FuncDef: FuncDef = {
  <func_type: FuncType> <id: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

Decl: Decl = {
    "int" <firdef: VarDef> <restdef: ("," VarDef)*> ";" => {
        let mut decl = Vec::new();
        decl.push(Box::new(firdef));
        for (_, item) in restdef.into_iter() {
            decl.push(Box::new(item));
        }
        return Decl {defs: decl};
    },
    "const" "int" <firdef: ConstVarDef> <restdef: ("," ConstVarDef)*> ";" => {
        let mut decl = Vec::new();
        decl.push(Box::new(firdef));
        for (_, item) in restdef.into_iter() {
            decl.push(Box::new(item));
        }
        return Decl {defs: decl};
    }
}

VarDef: VarDef = {
    <id: Ident> => VarDef::Ident(id),
    <id: Ident> "=" <exp: Exp> => VarDef::IdentInit(id, Box::new(exp)),
}

ConstVarDef: VarDef = {
    <id: Ident> "=" <exp: Exp> => VarDef::ConstIdentInit(id, Box::new(exp)),
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <blockitem: BlockItem*> "}" => {
    let mut block = Vec::new();
    for item in blockitem.into_iter() {
        block.push(Box::new(item));
    }
    return Block { vecitem: block };
};

BlockItem: BlockItem = {
    <stmt: Stmt> => BlockItem::Stmt(Box::new(stmt)),
    <decl: Decl> => BlockItem::Decl(Box::new(decl)),
}

OptionExp: Option<Exp> = Exp?;

Stmt: Stmt = {
    <stmt: MatchedStmt> => <>,
    <stmt: UnMatchedStmt> => <>,
}

MatchedStmt: Stmt = {
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(lval, Box::new(exp)),
    <optexp: OptionExp> ";" => Stmt::Do(Box::new(optexp)),
    "return" <optexp: OptionExp> ";" => Stmt::Return(Box::new(optexp)),
    <block: Block> => Stmt::Block(Box::new(block)),
    "if" "(" <exp: Exp> ")" <stmt1: MatchedStmt> "else" <stmt2: MatchedStmt> => Stmt::IfElse(Box::new(exp), Box::new(stmt1), Box::new(stmt2)),
    "while" "(" <exp: Exp> ")" <stmt: MatchedStmt> => Stmt::While(Box::new(exp), Box::new(stmt)),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
}

UnMatchedStmt: Stmt = {
    "if" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::If(Box::new(exp), Box::new(stmt)),
    "if" "(" <exp: Exp> ")" <stmt1: MatchedStmt> "else" <stmt2: UnMatchedStmt> => Stmt::IfElse(Box::new(exp), Box::new(stmt1), Box::new(stmt2)),
    "while" "(" <exp: Exp> ")" <stmt: UnMatchedStmt> => Stmt::While(Box::new(exp), Box::new(stmt)),
}

Exp: Exp = <lorexp: LOrExp> => Exp { lorexp: Box::new(lorexp) };

LVal: String = <id: Ident> => <>;

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
    <lval: LVal> => PrimaryExp::LVal(lval),
    <num: Number> => PrimaryExp::Number(num),
}

UnaryExp: UnaryExp = {
    <primexp: PrimaryExp> => UnaryExp::PrimaryExp(Box::new(primexp)),
    "+" <unexp: UnaryExp> => UnaryExp::Pos(Box::new(unexp)),
    "-" <unexp: UnaryExp> => UnaryExp::Neg(Box::new(unexp)),
    "!" <unexp: UnaryExp> => UnaryExp::Not(Box::new(unexp)),
}

MulExp: MulExp = {
    <unexp: UnaryExp> => MulExp::UnaryExp(Box::new(unexp)),
    <mulexp: MulExp> "*" <unexp: UnaryExp> => MulExp::Mul(Box::new(mulexp), Box::new(unexp)),
    <mulexp: MulExp> "/" <unexp: UnaryExp> => MulExp::Div(Box::new(mulexp), Box::new(unexp)),
    <mulexp: MulExp> "%" <unexp: UnaryExp> => MulExp::Mod(Box::new(mulexp), Box::new(unexp)),
}

AddExp: AddExp = {
    <mulexp: MulExp> => AddExp::MulExp(Box::new(mulexp)),
    <addexp: AddExp> "+" <mulexp: MulExp> => AddExp::Add(Box::new(addexp), Box::new(mulexp)),
    <addexp: AddExp> "-" <mulexp: MulExp> => AddExp::Sub(Box::new(addexp), Box::new(mulexp)),
}

RelExp: RelExp = {
    <addexp: AddExp> => RelExp::AddExp(Box::new(addexp)),
    <relexp: RelExp> "<" <addexp: AddExp> => RelExp::Lt(Box::new(relexp), Box::new(addexp)),
    <relexp: RelExp> "<=" <addexp: AddExp> => RelExp::Le(Box::new(relexp), Box::new(addexp)),
    <relexp: RelExp> ">" <addexp: AddExp> => RelExp::Gt(Box::new(relexp), Box::new(addexp)),
    <relexp: RelExp> ">=" <addexp: AddExp> => RelExp::Ge(Box::new(relexp), Box::new(addexp)),
}

EqExp: EqExp = {
    <relexp: RelExp> => EqExp::RelExp(Box::new(relexp)),
    <eqexp: EqExp> "==" <relexp: RelExp> => EqExp::Eq(Box::new(eqexp), Box::new(relexp)),
    <eqexp: EqExp> "!=" <relexp: RelExp> => EqExp::Ne(Box::new(eqexp), Box::new(relexp)),
}

LAndExp: LAndExp = {
    <eqexp: EqExp> => LAndExp::EqExp(Box::new(eqexp)),
    <landexp: LAndExp> "&&" <eqexp: EqExp> => LAndExp::And(Box::new(landexp), Box::new(eqexp)),
}

LOrExp: LOrExp = {
    <landexp: LAndExp> => LOrExp::LAndExp(Box::new(landexp)),
    <lorexp: LOrExp> "||" <landexp: LAndExp> => LOrExp::Or(Box::new(lorexp), Box::new(landexp)),
}

Number: i32 = <num: IntConst> => <>;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}